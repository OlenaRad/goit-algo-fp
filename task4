import heapq
import uuid

class Node:
    def __init__(self, key, color="skyblue"):
        self.left = None
        self.right = None
        self.val = key
        self.color = color
        self.id = str(uuid.uuid4())

def add_heap_edges(graph, node, pos, x=0, y=0, layer=1):
    if node is not None:
        graph.add_node(node.id, color=node.color, label=node.val)
        if node.left:
            graph.add_edge(node.id, node.left.id)
            l = x - 1 / 2 ** layer
            pos[node.left.id] = (l, y - 1)
            l = add_heap_edges(graph, node.left, pos, x=l, y=y - 1, layer=layer + 1)
        if node.right:
            graph.add_edge(node.id, node.right.id)
            r = x + 1 / 2 ** layer
            pos[node.right.id] = (r, y - 1)
            r = add_heap_edges(graph, node.right, pos, x=r, y=y - 1, layer=layer + 1)
    return graph

def build_heap_tree(heap_array):
    root = None
    if heap_array:
        root = Node(heap_array[0])
        queue = [root]
        i = 1
        while i < len(heap_array):
            current_node = queue.pop(0)
            left_value = heap_array[i] if i < len(heap_array) else None
            right_value = heap_array[i + 1] if i + 1 < len(heap_array) else None
            if left_value is not None:
                current_node.left = Node(left_value)
                queue.append(current_node.left)
            if right_value is not None:
                current_node.right = Node(right_value)
                queue.append(current_node.right)
            i += 2
    return root

def draw_heap_tree(heap_root):
    heap = nx.DiGraph()
    pos = {heap_root.id: (0, 0)}
    heap = add_heap_edges(heap, heap_root, pos)

    colors = [node[1]['color'] for node in heap.nodes(data=True)]
    labels = {node[0]: node[1]['label'] for node in heap.nodes(data=True)}

    plt.figure(figsize=(8, 5))
    nx.draw(heap, pos=pos, labels=labels, arrows=False, node_size=2500, node_color=colors)
    plt.show()

# Приклад використання:
heap_array = [1, 3, 5, 7, 9, 2, 4, 34, 2, 1, 2]
heapq.heapify(heap_array)  # Перетворення списку у бінарну купу
heap_tree_root = build_heap_tree(heap_array)  # Побудова бінарного дерева
draw_heap_tree(heap_tree_root)  # Відображення бінарної купи у вигляді дерева
