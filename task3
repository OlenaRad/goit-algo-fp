import heapq

class Graph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.adjacency_list = {vertex: {} for vertex in range(vertices)}

    def add_edge(self, src, dest, weight):
        self.adjacency_list[src][dest] = weight
        self.adjacency_list[dest][src] = weight

    def dijkstra(self, start):
        min_heap = [(0, start)]
        distances = [float('inf')] * self.vertices
        distances[start] = 0

        while min_heap:
            current_distance, current_vertex = heapq.heappop(min_heap)

            if current_distance > distances[current_vertex]:
                continue

            for neighbor, weight in self.adjacency_list[current_vertex].items():
                distance = current_distance + weight
                if distance < distances[neighbor]:
                    distances[neighbor] = distance
                    heapq.heappush(min_heap, (distance, neighbor))

        return distances

# Приклад використання:
graph = Graph(6)
graph.add_edge(0, 1, 5)
graph.add_edge(0, 2, 3)
graph.add_edge(1, 3, 6)
graph.add_edge(1, 4, 2)
graph.add_edge(2, 3, 7)
graph.add_edge(3, 4, 4)
graph.add_edge(3, 5, 3)
graph.add_edge(4, 5, 5)

start_vertex = 0
shortest_distances = graph.dijkstra(start_vertex)
print("Найкоротші відстані від вершини", start_vertex, ":")
for i, distance in enumerate(shortest_distances):
    print("Вершина", i, ":", distance)
